/** * A set of functions to check if the titles are in safe bounds *  * This is for SD only. * If the width is more than 960, it checks (190, 51, 770, 487) * otherwise, it uses (70, 51, 648, 487) * It will skip "GUIDES","TOYBOX" and "BACKGROUND IMAGE" *  * @author David Klein <dklein@one-k.com> * @author Chen Lin <clin@one-k.com> * * 2013/10/23 */#include "pathTracker.jsx" // to track the path#include "utilities.jsx"   // wait for re-draw and maybe other functionsfunction titleSafeChecker (){        // safe bounds array (left, top, right, bottom)    this.bounds_safe = "";        // target bounds to check, from the psd file    this.bounds_document = "";        // bounds from a single temperally layer    this.bounds_layer = "";        // the document    this.doc = "";        // document width    this.docWidth = 0;        // document height    this.docHight = 0;        // document file name    this.docName = "";        // the result of checking    this.result = true;        // the detail checking log    this.resultMessage = new Array();           // the current working layer    this.layer = "";        // the current working path    this.path = new pathTracker();        // temperally message, a single layer might have multiple errors, so use temp    // message to include all the possible error.    this.tempMessage = "";        // if there is an error per .psd file    this.hasError = false;        // the main program    this.check = function (aDoc){        this.doc = aDoc;        this.initial();        this.setBounds_safe();        this.getBounds_document();                // combine all the layer and just check once        this.result = this.checkDocBoundsSafe(            this.bounds_document,             this.bounds_safe        );        //alert( "result:"+this.result);        // if failed, check all the art layers.        if(!this.result){            this.fullCheck();        }            //the result will be saved in "resultMessage"    };    // set the document and its properities    this.initial = function (){        this.docHeight = this.doc.height;        this.docWidth  = this.doc.width;        this.docName   = this.doc.name;        this.path = new pathTracker();        // track current path name        this.path.down (this.docName);                // clear the result message        this.resultMessage = new Array();        this.tempMessage = "";        this.hasError = false;        this.result = true;    };    // set the safe bounds    this.setBounds_safe = function(){        if (this.docWidth < 960) {            // SD 4:3            this.bounds_safe = new Array(70, 51, 648, 487)        }else{            // SD 16:9            this.bounds_safe = new Array(190, 51, 770, 487);        };    };    // check the document bounds    this.checkDocBoundsSafe = function (toCheck, safe) {                // no item in this layer        if (toCheck[0] == 0 &&            toCheck[1] == 0 &&            toCheck[2] == 0 &&            toCheck[3] == 0         ) {            return true;        }                var failed = false;        var tempMesg= "";                if (toCheck[0] < safe[0]){            //tempMesg += ": left side ("+toCheck[0]+" vs "+safe[0]+")";            tempMesg+= ": left side.";            failed = true;        }        if (toCheck[1] < safe[1]){            //tempMesg += ": top side ("+toCheck[1]+" vs "+safe[1]+")";            tempMesg+=": top side.";            failed = true;        }        if (toCheck[2] > safe[2]){            //tempMesg += ": right side ("+toCheck[2]+" vs "+safe[2]+")";            tempMesg+= ": right side.";            failed = true;        }        if (toCheck[3] > safe[3]){            //tempMesg += ": bottom ("+toCheck[3]+" vs "+safe[3]+")";            tempMesg+= ": bottom.";            failed = true;        }                if(failed){            this.tempMessage = tempMesg;            return false;        }else{            return true;        }    };    // the the bounds of a single art layer    this.getBounds_layer = function (aLayer) {        //this.bounds_layer = GetTheBounds (aLayer);                activeDocument.activeLayer = aLayer;	    var OriginalDoc = activeDocument;	    WaitForRedraw();	    var EphemeralDoc = documents.add(            this.docWidth,            this.docHeight,            72,             "TempFlattener",             NewDocumentMode.RGB,             DocumentFill.TRANSPARENT        );	    activeDocument = OriginalDoc;	    WaitForRedraw()        //dup to EphemeralDoc.layers[0]	    aLayer.duplicate(EphemeralDoc, ElementPlacement.PLACEATBEGINNING) 	    activeDocument = EphemeralDoc	    WaitForRedraw()	    EphemeralDoc.crop(            new Array(0, 0, this.docWidth, this.docHeight),             undefined,             this.docWidth,            this.docHeight,        )	    EphemeralDoc.mergeVisibleLayers();	    var t= EphemeralDoc.layers[0].bounds;        // remove "px" after the number        this.bounds_layer = this.bounds_trim(t);	    EphemeralDoc.close(SaveOptions.DONOTSAVECHANGES);	    activeDocument = OriginalDoc;	    WaitForRedraw();                    };    // check the bounds of a layer    this.checkLayerBounds = function (aLayer){        this.getBounds_layer (aLayer);        if (!this.checkDocBoundsSafe(this.bounds_layer,this.bounds_safe)){                        //$.writeln("Possible out at " +this.path.getFullPath() +": "+this.tempMessage);            this.hasError=true;            this.resultMessage.push( "Possible out at " +this.path.getFullPath() +" "+this.tempMessage+"\n");        };            };    // get the bounds of the whole document    this.getBounds_document = function (){        activeDocument = this.doc;        var EphemeralDoc = this.doc.duplicate("EphemeralDoc");        activeDocument = EphemeralDoc;        WaitForRedraw();        EphemeralDoc.crop(            new Array(0, 0, this.docWidth, this.docHeight),             undefined,             this.docWidth,             this.docHeight        );        try{            EphemeralDoc.mergeVisibleLayers();        }catch(e){            //$.writeln (e);        }                // remove the invisible layer from the bottom to speed up        for (var i = EphemeralDoc.layers.length -1 ; i > -1; i--) {            if (EphemeralDoc.layers[i].visible == false){                EphemeralDoc.layers[i].remove();            }        }        // get the bounds        var tempArray = EphemeralDoc.layers[0].bounds;                EphemeralDoc.close(SaveOptions.DONOTSAVECHANGES);        activeDocument = this.doc;        WaitForRedraw();                //remove the "px"        this.bounds_document = this.bounds_trim(tempArray);    };    // check the full document, layer by layer    this.fullCheck = function (){        for(var i=0; i < this.doc.layers.length; i++){            if(                this.doc.layers[i].name != "GUIDES" &&                this.doc.layers[i].name != "TOYBOX" &&                this.doc.layers[i].name != "BACKGROUND IMAGE"                            ){                                this.checkLayerRecursive(this.doc.layers[i]);            }        }    };        // recursively check each layer set, stop at an art layer    this.checkLayerRecursive = function (aLayer){        this.path.down (aLayer.name);        if(aLayer.typename == "ArtLayer"){            this.checkLayerBounds(aLayer);        }else{            for (var i=0; i<aLayer.layers.length; i++){                this.checkLayerRecursive(aLayer.layers[i]);            }        }        this.path.up();    };    // remove "px" from the number    this.bounds_trim = function (ary){        return new Array (            parseInt(ary[0],10),            parseInt(ary[1],10),            parseInt(ary[2],10),            parseInt(ary[3],10)        );    }}