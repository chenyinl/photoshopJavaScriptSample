/* * Hightlight space check functions */#include "pathTracker.jsx" // to track the path#include "utilities.jsx"   // wait for re-draw and maybe other functions/* * There are three groups of hights: language, for alls, and alt pages * These class will go through all three groups and make all the combinations, * then check if and of the highlights is overlap with eachother. * * 2013/11/4 */function highlightChecker (){    // the current document (file    this.doc;        // all the menu list exclude some "for ALL", "guide" and "Toybox"    this.availableMenuList;        // ALT pages list    this.altPageList;        // ALT pages highlights    this.altPagesHL = new Array();        // FOR ALL Language or FOR ALL Pages    this.forAllPagesList = new Array();        // language pages highlights    this.langHL = new Array();        // the result, true (pass) or false (has problem)    this.result = true;        // result message    this.resultMessage = new Array();        // highlights in different language pages    this.forAllPagesHL = new Array();        // All the highlights in different combinations    // each highlight has     // {    //   name,   => string    //   bounds, => array of 4 pisitions    //   history => the name of other highlight that already compared    // }    this.viewHL = new Array();         // Check three levels, 6, 3, and no space.    this.limit = new Array(        {px: 6, level: "Warning", message: " are less than 6 pixels away.\n"},        {px: 3, level: "Danger", message: " are less than 3 pixels away.\n"},        {px: 0, level: "Error", message: " are overlaping, please fix.\n"}    );        // the main program    this.check = function(doc){        this.doc = doc;        this.resultMessage = new Array();                this.result = true; //reset the result        // set the three groups        this.setAvailableMenuList();        this.setAltPageList();        this.setForAllList();                // get the highlights from different group        this.langHL = this.getHL(this.availableMenuList, "LANG");        this.altPagesHL = this.getHL( this.altPageList, "ALT");        this.forAllPagesHL = this.getHL( this.forAllPagesList,"ALL");                // create all the combinations for each group        this.setViewHL();                // check if overlap from each combination        this.checkViewHL();    }    // get highlights from a page    this.getHL = function( fromList, groupName){        var tempArray = new Array();        for(var i=0; i<fromList.length; i++){            // get from highlights folder            var l = this.doc.layerSets.getByName(fromList[i]).layerSets.getByName("highlights");            if(l){                var t = new Array();                for(var j=0; j<l.layers.length; j++){                    var n = this.doc.name+"/"+fromList[i]+"/"+l.layers[j].name;                    var b; //temp bounds;                    if(l.layers[j].kind == LayerKind.NORMAL){                        b = l.layers[j].bounds;                    }else{                        b = GetTheBounds(l.layers[j]);                    }                    b = bounds_trim(b);                    t.push(                        {                            name: n,     // name                            bounds: b,   // bounds                            history:""   // history of the compared highghts                        }                    );                }                tempArray.push(t);               }        }        return tempArray;    }    this.setAvailableMenuList = function(){        // get the menu like "en", "es", "it"        // getAllMenu is at utilities.jsx        this.availableMenuList = getAllMenu(this.doc);    }    // get menu like ALT pages    this.setAltPageList = function () {        this.altPageList = getAltPageList(this.doc);    }    // get all the language menu    this.setForAllList = function (){        this.forAllPagesList = getForAllPageList(this.doc);    }    this.setViewHL = function (){        //$.writeln(this.langHL);        //$.writeln(this.altPagesHL);                // if has alt pages, user two loops to combine        if(this.altPagesHL.length!=0){            for(var i=0; i<this.langHL.length; i++){                for(var j=0; j<this.altPagesHL.length; j++){                    this.viewHL.push(this.langHL[i].concat(this.altPagesHL[j]));                }            }        }else{            //clone the array            this.viewHL = this.langHL.slice(0);        }                // if there is "For Al pages. user loop th add         if(this.forAllPagesHL.length != 0){            for(var i = 0; i<this.forAllPagesHL.length; i++){                for(var j=0; j<this.viewHL.length; j++){                    this.viewHL[j]=this.viewHL[j].concat(this.forAllPagesHL[i]);                }            }        }        // test / debug only        //this.printViewHL();    }    // for debug only, display the highlights array    this.printViewHL = function(){        for (var i=0; i<this.viewHL.length; i++){            //$.writeln(this.viewHL[i]);            //$.writeln("****************************************");        }    };    // http://silentmatt.com/rectangle-intersection/    this.checkViewHL = function(){        // first level is all the combinations        for(var i=0; i<this.viewHL.length; i++){            // second level is the highlights            for(var j=0; j<this.viewHL[i].length; j++){                // highlights n compare to n+1 and after only.                for(var k=j+1; k<this.viewHL[i].length; k++){                    var A = this.viewHL[i][j];                      var B = this.viewHL[i][k];                    // if has been checked, skip                    if(! this.checkedBefore(A,B)){                                                this.checkTwoHighlights(A,B);                    };                                     }            }        }    }    // look up if it has been checked before    this.checkedBefore = function(A,B){        //checked before: the highlight name is in the "history"        if(A.history.indexOf(B.name)!=-1){            return true;        }else{            //$.writeln("not Checked: "+A.history+" vs "+B.name);            // write highlight name to "history"            A.history+=B.name;            B.history+=A.name;            return false;        }    }    // check by the 4 position    // see http://silentmatt.com/rectangle-intersection/    this.checkTwoHighlights = function(a,b){        var A = a.bounds;        var B = b.bounds;        var mesg = "";                // start check from 6px, if passed won't check 3 and 0 px.        for( var i=0; i<this.limit.length; i++){                        if(                (A[0] - B[2])< this.limit[i].px &&                (A[2] - B[0])> this.limit[i].px &&                (A[1] - B[3])< this.limit[i].px &&                (A[3] - B[1])> this.limit[i].px            ){                this.result = false;                mesg = this.limit[i].level+": "+a.name+" and "+b.name+ this.limit[i].message;                            }else{                continue;            }        }                if(mesg != ""){            this.resultMessage.push( mesg );            //$.writeln(mesg);        }    }// end of class}